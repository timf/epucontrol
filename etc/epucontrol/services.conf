[confs_used]

# Conf files for launches typically live in 'etc/epucontrol/services' and
# you point to them below in this file.
#
# For example, if you specify the --haservice "provisioner", the section
# below called "provisioner" is consulted for pointers to specific
# configuration files (e.g. "chefroles").
#
# These configuration files may be templates or not.  They are scanned
# for the template ${variable} syntax.  If you supplied a json file for
# this run (see --help), those key/values will be consulted in order to
# make the substitution.  If a ${variable} is present without a matching
# supplied key, the launch will not continue.
#
# No matter what, the exact conf file used on the run will not be the
# file in 'etc/epucontrol/services'
#
# Each will instead always be a freshly created file in a per-run directory.
# This configuration is the a master directory, a subdirectory per run is
# created under it.
#
# If the path to this directory is relative, it is calculated from the
# epucontrol specific var directory (see dirs.conf)

confs_used_dir: confs_used


# ------------------------------------------------------------------------

# Contextualization of EPU software itself is done with fab currently.
[fablaunch]

# If path is relative, evaluated relative to the libexec dir (see dirs.conf)
fablaunch: fab-bootstrap.sh


# ------------------------------------------------------------------------

##########################################################################
# Each section below should be named the HA service name that is being   #
# launched.                                                              #
#                                                                        #
# If paths are relative, they are evaluated relative to the serviceconfs #
# directory (see dirs.conf).                                             #
##########################################################################

# ------------------------------------------------------------------------


[provisioner]

chefroles: provisioner.chefroles.json


[sleeper]

# Default
#chefroles: sleeper.chefroles.json

# Real engine
chefroles: sleeper_bounded.chefroles.json

# Greedy engine
#chefroles: sleeper_greedy.chefroles.json

