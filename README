======================================
Dependencies
======================================

Fabfile ("fab" on the commandline), simplejson and boto are required.

Sample env:
$ virtualenv --no-site-packages somedir
$ source somedir/bin/activate
$ easy_install fabric
$ easy_install boto
$ easy_install simplejson


======================================
Preparations
======================================

Copy "share/epucontrol/environment.sample" somewhere outside the repository.

Edit that, adding your credentials, and then always source it before using
the program.

For example, by adding something like this to your shell rc file:

    alias epucontrol='. ~/code/environment-epucontrol && cd ~/code/epucontrol'


======================================
Usage
======================================


$ ./bin/epu-control.sh --action create --haservice provisioner --name run1
$ ./bin/epu-control.sh --action create --haservice sleeper --name run1


(or: ./bin/epu-control.sh -a create -s provisioner -n run1
     ./bin/epu-control.sh -a create -s sleeper -n run1

     See -h or --help for shortcuts.)

Note how each invocation gets the same run name.  This will let you do
coordinated things with the whole run.

For example, the "killrun" action (terminates all the involved instances
via IaaS) and the "logfetch" action (grabs all the logs from the involved
instances).
(* Currently these don't operate on the workers yet, getting to it).

Fetching + gathering:

$ ./bin/epu-control.sh -a logfetch -n run1
$ ./bin/epu-control.sh -a update-events -n run1


======================================
Sleeper service
======================================

The work messages for sleeper can be invoked by HTTP messages, this will be
built into a python module eventually.

SLEEPERHOST="address sleeper gets..."
BATCHNAME="name of this batch of jobs"
NUMJOBS="number of jobs to kick off"
SLEEPSECS="length in seconds worker should sleep"

  wget http://$SLEEPERHOST:8000/$BATCHNAME/$NUMJOBS/$SLEEPSECS
  
So for example:

  wget http://$SLEEPERHOST:8000/run34/200/30
  

======================================
Under active development
======================================

More functionality to come...

